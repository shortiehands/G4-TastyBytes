name: G4-TastyBytes Backend CI/CD

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'  # Trigger CI when a tag is pushed (e.g., v1.0.0)
  pull_request:
    branches: [ "main" ]

env:
  # change this to your Docker Hub username and repository
  # example: donta/book_app_backend
  DOCKER_IMAGE: sidraarshad/g4-tastybytes
    
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # set these secrets in the GitHub repository settings
      # these are used to run the tests
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      COGNITO_REGION: ${{ secrets.COGNITO_REGION }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
      COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
      COGNITO_CLIENT_SECRET: ${{ secrets.COGNITO_CLIENT_SECRET }}
      COGNITO_USER_ROLE: ${{ secrets.COGNITO_USER_ROLE }}
      COGNITO_ADMIN_ROLE: ${{ secrets.COGNITO_ADMIN_ROLE }}
    steps:
      - uses: actions/checkout@v4
    
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run tests with pytest
        run: |
          cd backend
          pytest -v -s
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"  # Specify the Node.js version you want

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install --frozen-lockfile  # Install dependencies

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Backend Build
      - name: Set up Docker Buildx for Backend
        uses: docker/setup-buildx-action@v3

      - name: Extract version for Backend
        id: get_version_backend
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAGS="${{ env.DOCKER_IMAGE }}:$VERSION-backend,${{ env.DOCKER_IMAGE }}:latest-backend"
          else
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            VERSION="latest-$TIMESTAMP-backend"
            TAGS="${{ env.DOCKER_IMAGE }}:$VERSION,${{ env.DOCKER_IMAGE }}:latest-backend"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAGS=$TAGS" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.TAGS }}

      # Frontend Build
      - name: Set up Docker Buildx for Frontend
        uses: docker/setup-buildx-action@v3

      - name: Extract version for Frontend
        id: get_version_frontend
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAGS="${{ env.DOCKER_IMAGE }}:$VERSION-frontend,${{ env.DOCKER_IMAGE }}:latest-frontend"
          else
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            VERSION="latest-$TIMESTAMP-frontend"
            TAGS="${{ env.DOCKER_IMAGE }}:$VERSION,${{ env.DOCKER_IMAGE }}:latest-frontend"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAGS=$TAGS" >> $GITHUB_ENV

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.TAGS }}

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Backend ECS Service
        run: |
          ecs_task_definition=$(aws ecs describe-services --cluster ${{ secrets.AWS_ECS_CLUSTER_NAME }} --services ${{ env.AWS_ECS_SERVICE_NAME_BACKEND }} --query "services[0].taskDefinition" --output text)
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER_NAME }} --service ${{ env.AWS_ECS_SERVICE_NAME_BACKEND }} --force-new-deployment --task-definition $ecs_task_definition

      - name: Update Frontend ECS Service
        run: |
          ecs_task_definition=$(aws ecs describe-services --cluster ${{ secrets.AWS_ECS_CLUSTER_NAME }} --services ${{ env.AWS_ECS_SERVICE_NAME_FRONTEND }} --query "services[0].taskDefinition" --output text)
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER_NAME }} --service ${{ env.AWS_ECS_SERVICE_NAME_FRONTEND }} --force-new-deployment --task-definition $ecs_task_definition